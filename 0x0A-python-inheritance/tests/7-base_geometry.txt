# Test cases BaseGeometry
>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

# if area method is present
>>> 'area' in dir(BaseGeometry)
True

# if integer_validator method is present
>>> 'integer_validator' in dir(BaseGeometry)
True



# adding object class with a valid integer value
>>> bg = BaseGeometry()

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)


# error case - when the value is a string
>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] name must be an integer

# error case - when the value is zero
>>> try:
...     bg.integer_validator("age", 0)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] age must be greater than 0

# error case - when the value is a negative integer number
>>> try:
...     bg.integer_validator("distance", -4)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[ValueError] distance must be greater than 0

# other edge cases

# error case - when the value is equal None
>>> try:
...     bg.integer_validator("distance", None)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] distance must be an integer

# error case - when only have a name parameter
>>> try:
...     bg.integer_validator("distance")
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 1 required positional argument: 'value'

# Non error case - when the name is a empty string
>>> try:
...     bg.integer_validator("", 23)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))

# error case - when integer_validator doesn't have parameter
>>> try:
...     bg.integer_validator()
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() missing 2 required positional arguments: 'name' and 'value'

# View call area exception:
>>> f = BaseGeometry()
>>> f.area()
Traceback (most recent call last):
Exception: area() is not implemented

# error case - when have an additional parameter on a function
>>> try:
...     bg.integer_validator("numbers", 2, 3)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] integer_validator() takes 3 positional arguments but 4 were given

# error case - when value is a boolean
>>> try:
...     bg.integer_validator("numbers", True)
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] numbers must be an integer

# error case - when value is a tuple
>>> try:
...     bg.integer_validator("numbers", (4,))
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] numbers must be an integer

# error case - when value is a list
>>> try:
...     bg.integer_validator("numbers", [1, 2, 3])
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] numbers must be an integer

# error case - when value is a dict
>>> try:
...     bg.integer_validator("numbers", {"num": 1})
... except Exception as e:
...     print("[{}] {}".format(e.__class__.__name__, e))
[TypeError] numbers must be an integer

>>> bg.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> bg.integer_validator("age")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'
